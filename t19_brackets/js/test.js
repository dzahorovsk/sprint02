describe("Проверка функции checkBrackets", function() {

    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('1)()(())2(()'), 2);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('(gdf)(((f)'), 2);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('564))(())2(()'), 3);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('(hfgdgdfh)()'), 0);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('1))))2(()'), 5);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('1))33()))2(()'), 5);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('(fhfff1)(()'), 1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('dd(8))(()'), 2);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('0()(qwerty(()'), 2);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('(1))))(2)(()'), 4);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('add()push())'), 1);
    });
    
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets(NaN), -1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets('gdfsgfsd'), -1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets(4n), -1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets(67), -1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets(true), -1);
    });
    it("Проверяет на наличие открывающей и закрывающей скобок, если нет - выводит -1, если это не строка  - выводит -1, или выводит количество непарных скобок", function() {
        assert.equal(checkBrackets(null), -1);
    });
});

console.log(checkBrackets('1)()(())2(()'));// 2
console.log(checkBrackets('(gdf)(((f)'));
console.log(checkBrackets('564))(())2(()'));
console.log(checkBrackets('(hfgdgdfh)()'));
console.log(checkBrackets('1))))2(()'));
console.log(checkBrackets('1))33()))2(()'));
console.log(checkBrackets('(fhfff1)(()'));
console.log(checkBrackets('dd(8))(()'));
console.log(checkBrackets('0()(qwerty(()'));
console.log(checkBrackets('(1))))(2)(()'));
console.log(checkBrackets('add()push())'));

console.log(checkBrackets(NaN));// -1
console.log(checkBrackets('gdfsgfsd'));
console.log(checkBrackets(4n));
console.log(checkBrackets(67));
console.log(checkBrackets(true));
console.log(checkBrackets(null));

